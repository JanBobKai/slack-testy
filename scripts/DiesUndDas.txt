msgData = {
          channel: msg.envelope.user.name
          attachments: [
            {
              fallback: "Fallback text here.",
              color: "danger",
              title: "Title text here"
              text: "Main body text"
              mrkdwn_in: ["text"]
            }
          ]
        }
        robot.adapter.customMessage msgData





        module.exports = (robot) ->
  robot.router.post "/hubot/say", (req, res) ->

    room = req.body.room
    message = req.body.message

    robot.logger.info "Message '#{message}' received for room #{room}"

    user = robot.adapter.userForId 'broadcast'
    user.room = room
    user.type = 'groupchat'

    if message
      robot.send user, "#{message}"

    res.writeHead 200, {'Content-Type': 'text/plain'}
    res.end 'Thanks\n'





    {
    "attachments": [
        {
            "fallback": "Required plain-text summary of the attachment.",
            "color": "#36a64f",
            "pretext": "Optional text that appears above the attachment block",
            "author_name": "Bobby Tables",
            "author_link": "http://flickr.com/bobby/",
            "author_icon": "http://flickr.com/icons/bobby.jpg",
            "title": "Slack API Documentation",
            "title_link": "https://api.slack.com/",
            "text": "Optional text that appears within the attachment",
            "fields": [
                {
                    "title": "Priority",
                    "value": "High",
                    "short": false
                }
            ],
            "image_url": "http://my-website.com/path/to/image.jpg",
            "thumb_url": "http://example.com/path/to/thumb.png",
            "footer": "Slack API",
            "footer_icon": "https://platform.slack-edge.com/img/default_application_icon.png",
            "ts": 123456789
        }
    ]



       robot.respond /send attachments/i, (msg) ->
     msg.send(
       attachments: [
         {
           text: '*error*: something bad happened'
           fallback: 'error: something bad happened'
           color: 'danger'
           mrkdwn_in: ['text']
         }
       ]
     )

db.users.find(name: new RegExp(search)) //For substring search, case sensitive. 
db.users.find(name: new RegExp('^' + search + '$')) //For exact search, case sensitive
db.users.find(name: new RegExp(search， ‘i')) //For substring search, case insensitive
db.users.find(name: new RegExp('^' +search + '$', 'i')); //For exact search, case 
https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp


https://thwack.solarwinds.com/thread/78711

https://hodgkins.io/chatops-on-windows-with-hubot-and-powershell


robot.emit 'slack-attachment',
  channel: res.message.user.name
  username: robot.name
  icon_url: 'https://slack.global.ssl.fastly.net/9fa2/img/services/hubot_128.png'
  content:
    fallback: "A thing #{thing}"
    title: my_title
    text: "```<~15 lines>```"
    mrkdwn_in: ['text']
    color: '#111111'



    http://hal.readthedocs.io/en/latest/adapters/slack.html
    https://www.pagerduty.com/docs/guides/hubot-integration-guide/




    room = res.envelope.room
                timestamp = new Date/1000|0
                attachments = [ {
                    fallback: 'Kann leider auf deinem Gerät nicht angezeigt werden',
                    color: 'danger',
                    pretext: 'Pretext',
                    text: 'Text',
                    image_url: 'Image_url',
                    fields: [ {
                        title: 'Titel',
                        value: 'Value',
                        short: true
                    }]
                }, {
                    fallback: 'test',
                    color: 'grey',
                    footer: 'resis',
                    footer_icon: 'https://avatars.slack-edge.com/2017-03-09/151204178657_8ed2b3731b17d14bfdf9_48.png',
                    ts: timestamp
                }
                ]
                attachments.image_url = Picurl
                attachments.text = bla
                options = { as_user: true, link_names: 1, attachments: attachments }

                client = robot.adapter.client
                client.web.chat.postMessage(room, '', options)