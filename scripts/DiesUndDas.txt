buttons
https://github.com/eedevops/hubot-enterprise/wiki#hubotenterprise-wiki
https://translate.google.com/translate?hl=en&sl=auto&tl=de&u=http%3A%2F%2Fqiita.com%2Fpunchdrunker%2Fitems%2Fdb9c824397e3affbb210&sandbox=1
http://blog.engineer.adways.net/entry/2017/02/10/180000

https://github.com/alleyinteractive/hubot-code-review
https://gist.github.com/yue82/bd2c3eb7f5434da7a1537d24d7f645cd
http://yuelab82.hatenablog.com/entry/slack_button_api_1

1 attachments利用方法の変更 robot.emit 'slack.attachment', <attachements data> から msg.send <attachments data> に変更になった 
robot.respond /attachments test$/i, (msg) -> data = attachments: [ text: '*error*: something bad happened' color: 'danger' mrkdwn_in: ['text'] ] msg.send data 
robot.adapter.client.rtm.dataStore.getUserByName('knjcode') # hubot-slack v4
robot.adapter.client.rtm.dataStore.getUserById('U0MU03G5V').name # => knjcode
robot.adapter.client.rtm.dataStore.getUserByName('knjcode').id
robot.adapter.client.getChannelGroupOrDMByID('C03NM270D').name # => general hubot-slack v4 
 msg.envelope.user.id robot.adapter.client.rtm.dataStore.users[userId].profile.image_48 # => "https://a.slack-edge.com/2fac/plugins/slackbot/assets/service_48.png
 robot.adapter.client.web.chat.postMessage(msg.envelope.room, 'hello')
 robot.adapter.client.rtm.on 'raw_message', (msg) -> message = JSON.parse msg if message.type is 'presence_change' console.log message 
  robot.hear /lenna/i, (msg) -> data = file: fs.createReadStream('lenna.png') channels: msg.envelope.room robot.adapter.client.web.files.upload("lenna.png", data) 
  robot.react (msg) -> robot.logger.debug msg.message.type, msg.message.reaction if msg.message.type == "added" data = channel: msg.message.item.channel timestamp: msg.message.item.ts robot.adapter.client.web.reactions.add(msg.message.reaction, data) 
  





https://github.com/masuilab/slack-hubot/tree/master/scripts
https://github.com/lmarkus/hubot-conversation


http://de.oac-head.com/items/12613/

Name
AllData
Picture
GearScore
DropBy

startGame = (game, channelId) ->
    robot.adapter.client.web.chat.postMessage(channelId, game.print(), {as_user: true})
    .then (res) ->
      games[res.ts] = game
      [EMOJIS.left, EMOJIS.up, EMOJIS.down, EMOJIS.right].reduce((curr, name) ->
        curr.then(-> robot.adapter.client.web.reactions.add(name, {channel: channelId, timestamp: res.ts}))
      , Promise.resolve())

  pressButton = (message) ->
    robotUserId = robot.adapter.client.rtm.dataStore.getUserByName(robot.name).id
    if message.user is robotUserId
      return
    emojiKey = _.findKey EMOJIS, (emoji) -> emoji is message.reaction
    ts = message.item.ts
    channelId = message.item.channel
    game = games[ts]
    unless game && /^(up|down|left|right)$/.test emojiKey
      return
    if game.isClear()
      return
    game[emojiKey]()
    robot.adapter.client.web.chat.update(ts, channelId, game.print())
    .catch (e) ->
      if e.message is 'edit_window_closed' and games[ts]?
        delete games[ts]
        startGame(game, channelId)
      else
robot.logger.error e



channelId = msg.envelope.room







function objToString (obj) {
    var str = '';
    for (var p in obj) {
        if (obj.hasOwnProperty(p)) {
            str += p + '::' + obj[p] + '\n';
        }
    }
    return str;
}



 String(yourobject);

OR

JSON.stringify(yourobject)



msgData = {
          channel: msg.envelope.user.name
          attachments: [
            {
              fallback: "Fallback text here.",
              color: "danger",
              title: "Title text here"
              text: "Main body text"
              mrkdwn_in: ["text"]
            }
          ]
        }
        robot.adapter.customMessage msgData





        module.exports = (robot) ->
  robot.router.post "/hubot/say", (req, res) ->

    room = req.body.room
    message = req.body.messagebc 

    robot.logger.info "Message '#{message}' received for room #{room}"

    user = robot.adapter.userForId 'broadcast'
    user.room = room
    user.type = 'groupchat'

    if message
      robot.send user, "#{message}"

    res.writeHead 200, {'Content-Type': 'text/plain'}
    res.end 'Thanks\n'





    {
    "attachments": [
        {
            "fallback": "Required plain-text summary of the attachment.",
            "color": "#36a64f",
            "pretext": "Optional text that appears above the attachment block",
            "author_name": "Bobby Tables",
            "author_link": "http://flickr.com/bobby/",
            "author_icon": "http://flickr.com/icons/bobby.jpg",
            "title": "Slack API Documentation",
            "title_link": "https://api.slack.com/",
            "text": "Optional text that appears within the attachment",
            "fields": [
                {
                    "title": "Priority",
                    "value": "High",
                    "short": false
                }
            ],
            "image_url": "http://my-website.com/path/to/image.jpg",
            "thumb_url": "http://example.com/path/to/thumb.png",
            "footer": "Slack API",
            "footer_icon": "https://platform.slack-edge.com/img/default_application_icon.png",
            "ts": 123456789
        }
    ]



       robot.respond /send attachments/i, (msg) ->
     msg.send(
       attachments: [
         {
           text: '*error*: something bad happened'
           fallback: 'error: something bad happened'
           color: 'danger'
           mrkdwn_in: ['text']
         }
       ]
     )

db.users.find(name: new RegExp(search)) //For substring search, case sensitive. 
db.users.find(name: new RegExp('^' + search + '$')) //For exact search, case sensitive
db.users.find(name: new RegExp(search， ‘i')) //For substring search, case insensitive
db.users.find(name: new RegExp('^' +search + '$', 'i')); //For exact search, case 
https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp


https://thwack.solarwinds.com/thread/78711

https://hodgkins.io/chatops-on-windows-with-hubot-and-powershell


robot.emit 'slack-attachment',
  channel: res.message.user.name
  username: robot.name
  icon_url: 'https://slack.global.ssl.fastly.net/9fa2/img/services/hubot_128.png'
  content:
    fallback: "A thing #{thing}"
    title: my_title
    text: "```<~15 lines>```"
    mrkdwn_in: ['text']
    color: '#111111'



    http://hal.readthedocs.io/en/latest/adapters/slack.html
    https://www.pagerduty.com/docs/guides/hubot-integration-guide/
https://github.com/cprater/slack-destiny-bot


msgData =
                channel: msg.message.room
                text: star.permalink
                unfurl_links: true
robot.emit 'slack.attachment', msgData



    room = res.envelope.room
                timestamp = new Date/1000|0
                attachments = [ {
                    fallback: 'Kann leider auf deinem Gerät nicht angezeigt werden',
                    color: 'danger',
                    pretext: 'Pretext',
                    text: 'Text',
                    image_url: 'Image_url',
                    fields: [ {
                        title: 'Titel',
                        value: 'Value',
                        short: true
                    }]
                }, {
                    fallback: 'test',
                    color: 'grey',
                    footer: 'resis',
                    footer_icon: 'https://avatars.slack-edge.com/2017-03-09/151204178657_8ed2b3731b17d14bfdf9_48.png',
                    ts: timestamp
                }
                ]
                attachments.image_url = Picurl
                attachments.text = bla
                options = { as_user: true, link_names: 1, attachments: attachments }

                client = robot.adapter.client
                client.web.chat.postMessage(room, '', options)



 data =
          content:
            fallback: "[#{repoName}] #{userName} #{action} #{title}"
            pretext: "[<#{repoUrl}|#{repoName}>] #{userName} #{action} <#{url}|#{title}>"
            color: "#e3e4e6"
          username: "bot"
          channel: room
          icon_url: "https://raw.githubusercontent.com/takezoe/gitbucket/master/src/main/webapp/assets/common/images/gitbucket.png"
        if action in ["updated", "opened"]
          data.content.text = body
        else
          data.content.text = action

        if action in ["opened", "reopened"]
          data.content.color = "#468847"
        if action in ["closed"]
          data.content.color = "#B94A48"

        @robot.emit "slack.attachment", data



  payload =
                    message: msg.message
                    content:
                      text: comment.content.replace(/\n/g, '\n')
                      pretext: issue.summary
                      title: commentUrl
                      title_link: commentUrl
                      fallback: comment.content
                      color: '#93c400'

                  robot.emit 'slack-attachment', payload



payload = 
      message:
        room: "##{query.room}"
      content:
        text: ''
        fallback: ''
        pretext: ''
        color: '#EEEEEE'
        fields: []

    switch type
      when 'issues'
        switch req.body.action
          when 'opened'
            payload.content.pretext = "New issue opened: #{req.body.issue.title}\r\n#{req.body.issue.url}"
            payload.content.text = "#{req.body.issue.body}"
            payload.content.fields.push title: 'Author', value: "#{req.body.issue.user.login}", short: true
            payload.content.fields.push title: 'Assignee', value: "#{req.body.issue.assignee.login}", short: true if req.body.issue.assignee?.login?
            payload.content.fallback = "#{payload.content.pretext}\r\n```#{payload.content.text}```\r\n"
            payload.content.color = '#00FF00'
          when 'closed'
            payload.content.pretext = "Issue closed: #{req.body.issue.title}\r\n#{req.body.issue.url}"
            payload.content.fields.push title: 'Closed by', value: "#{req.body.issue.user.login}", short: true
            payload.content.fields.push title: 'Assignee', value: "#{req.body.issue.assignee.login}", short: true if req.body.issue.assignee?.login?
            payload.content.fallback = "#{payload.content.pretext}\r\n"
            payload.content.color = '#FF0000'

      when 'push'
        push = req.body
        if push.commits.length > 0
          commitWord = if push.commits.length > 1 then "commits" else "commit"
          text = ''
          for commit in push.commits
            text += "\r\n  * #{commit.message} #{commit.url}"
        # else
        #   if push.created
        #     robot.send user, "#{push.pusher.name} created: #{push.ref}: #{push.base_ref}"
        #   if push.deleted
        #     robot.send user, "#{push.pusher.name} deleted: #{push.ref}"

        payload.content.pretext = "Got #{push.commits.length} new #{commitWord} by #{push.commits[0].author.name}"
        payload.content.text = text
        # payload.content.fields.push title: 'Author', value: "#{push.commits[0].author.name}", short: true
        payload.content.fallback = "#{payload.content.pretext}\r\n```#{payload.content.text}```\r\n"
        payload.content.color = '#00FF00'

      when 'issue_comment'
        switch req.body.action
          when 'created'
            payload.content.pretext = "New comment on issue: #{req.body.issue.title}\r\n#{req.body.comment.issue_url}"
            payload.content.text = "#{req.body.comment.body}"
            payload.content.fields.push title: 'Author', value: "#{req.body.issue.user.login}", short: true
            payload.content.fields.push title: 'Assignee', value: "#{req.body.issue.assignee.login}", short: true if req.body.issue.assignee?.login?
            payload.content.fallback = "#{payload.content.pretext}\r\n```#{payload.content.text}```\r\n"
        
    robot.emit 'slack-attachment', payload                
ccc

    fv

    ccchhhhhhffhjfrn            v  v n                                                                                 vt                         tg vxyxxxcacxxxxxxaaaaahgfxaullkk kkkkkvvvvvv wwehv